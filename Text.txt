#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include "ilcplex/ilocplex.h"
using namespace std;

int main() {
	int n = 6;
	int m = 2 * (n - 1);
	string gamemode = "P";
	IloEnv env;
	IloModel Model(env);
	IloArray<IloArray<IloBoolVarArray>> x(env, n);

	IloRangeArray B1(env);
	for (int i = 0; i < n; i++)
	{
		x[i] = IloArray<IloBoolVarArray>(env, n);
		for (int j = 0; j < n; j++)
		{
			x[i][j] = IloBoolVarArray(env, m);
		}
	}
	for (int i = 0; i < n; i++)
	{
		for (int k = 0; k < m; k++)
		{
			IloExpr B1_lhs(env);
			for (int j = 0; j < n; j++)
			{
				B1_lhs += x[i][j][k] + x[j][i][k];
			}
			B1.add(B1_lhs <= 1);
		}
	}
	Model.add(B1);

	//gamemode: NULL
	IloRangeArray B2(env);
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			IloExpr B2_lhs(env);
			for (int k = 0; k < m; k++)
			{
				B2_lhs += x[i][j][k];
			}
			B2.add(B2_lhs <= 1);
		}
	}
	Model.add(B2);

	//gamemode: Phased
	if (gamemode == "P") {
		IloRangeArray B2_phased(env);
		IloArray<IloBoolVarArray> y(env, n);
		for (int i = 0; i < n; i++)
		{
			y[i] = IloBoolVarArray(env, n);
			for (int j = 0; j < n; j++)
			{
				IloExpr B2_lhs1(env);
				IloExpr B2_lhs2(env);
				IloExpr B2_lhs3(env);
				IloExpr B2_lhs4(env);
				for (int k = 0; k < n - 1; k++)
				{
					B2_lhs1 += x[i][j][k];
					B2_lhs2 += x[j][i][k];
				}
				for (int k = n; k < m; k++)
				{
					B2_lhs3 += x[i][j][k];
					B2_lhs4 += x[j][i][k];
				}
				B2_phased.add(B2_lhs1 - y[i][j] <= 0.0001);
				B2_phased.add(B2_lhs2 + y[i][j] <= 1);
				B2_phased.add(B2_lhs3 + y[i][j] <= 1);
				B2_phased.add(B2_lhs4 - y[i][j] <= 0.0001);
			}
		}
		Model.add(B2_phased);
	}

	IloRangeArray B3(env);
	for (int i = 0; i < n; i++)
	{
		for (int k = 0; k < m; k++)
		{
			B3.add(x[i][i][k] <= 0);
		}
	}

	Model.add(B3);

	IloExpr Objectivefn(env);
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			for (int k = 0; k < m; k++)
			{
				Objectivefn += x[i][j][k];
			}
		}
	}


	Model.add(IloMaximize(env, Objectivefn));
	Objectivefn.end();
	IloCplex cplex(Model);
	cplex.setOut(env.getNullStream());
	cplex.solve();
	cout << cplex.getObjValue() << endl; 
	for (int k = 0; k < m; k++)
	{
		cout << "Slot " << k + 1 << ": ";
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < n; j++)
			{
				if (cplex.getValue(x[i][j][k]) == 1) {
					cout << "(" << i << ", " << j << "); ";
				}
			}
		}
		cout << "\n";
	}
	return 0;
}